{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation","text":"<p>Learn to build and manage your APIs with ease WSO2 API Manager is a complete platform for building, integrating, and exposing your digital services as managed APIs in the cloud, on-premise, and hybrid architectures to drive your digital transformation strategy.</p> <p>It allows API developers to design, publish, and manage the lifecycle of APIs and API product managers to create API products from one or more APIs</p>"},{"location":"API-M%201.8.0/1.9.0/1.9.1/1.10.0%20to%202.0.0/","title":"Upgrading from the Previous Release","text":"<p>The following information describes how to upgrade your API Manager server from API-M 1.8.0/1.9.0/1.9.1/1.10.0 to 2.0.0.\u00a0</p> <p>To upgrade from a version older than 1.8.0, follow the instructions in the document that was released immediately after your current release and upgrade incrementally.</p> <ul> <li>Migrating the configurations</li> <li>Upgrading the API Manager to 2.0.0</li> <li>Data migration of statistics from WSO2 DAS to API Manager Analytics</li> </ul>"},{"location":"API-M%201.8.0/1.9.0/1.9.1/1.10.0%20to%202.0.0/#migrating-the-configurations","title":"Migrating the configurations","text":"<p>NOTE:</p> <p>Do not copy entire configuration files from the current version of API Manager to the new one as some configuration files (for example, <code>api-manager.xml</code>) may have changed. Instead, redo the configuration changes in the new configuration files.</p> <p>In this section, you move all existing API Manager configurations from the current environment to the new one.</p> <ol> <li> <p>Back up all databases in your API Manager instances along with the     synapse configs of all the tenants and super tenant.     You find the synapse configs of the super tenant in the     <code>&lt;CURRENT_API-M_HOME&gt;/repository/deployment/server/synapse-configs/default</code>     directory. Synapse configs of tenants are in     the\u00a0<code>&lt;CURRENT_API-M_HOME&gt;/repository/tenants</code>\u00a0directory.\u00a0     If you use a\u00a0clustered/distributed API Manager setup, back up     the available configurations in the API Gateway node.</p> </li> <li> <p>Download API Manager 2.0.0     from\u00a0http://wso2.com/products/api-manager/.</p> </li> <li> <p>Open     the\u00a0<code>&lt;API-M_2.0.0_HOME&gt;/repository/conf/datasources/master-datasources.xml</code>\u00a0file     and provide the datasource configurations for the following     databases. You can copy the configuration values from the same file     in the current API Manager instance already being used.</p> <ul> <li>User Store</li> <li>Registry database/s</li> <li>API Manager Databases</li> </ul> </li> <li> <p>Edit the registry configurations in     the\u00a0<code>&lt;API-M_2.0.0_HOME&gt;/repository/conf/registry.xml</code> file and the     user database in     the\u00a0<code>&lt;API-M_2.0.0_HOME&gt;/repository/conf/user-mgt.xml</code>\u00a0file similar     to the configurations of the current API Manager.</p> </li> </ol> <p>Note that in a clustered/distributed API Manager setup, step 5    and 6 need to be done on the Gateway node.</p> <ol> <li>Move all your synapse configurations except the files mentioned     below by copying and replacing     the\u00a0<code>&lt;CURRENT_API-M_HOME&gt;/repository/deployment/server/synapse-configs/default</code>\u00a0directory     to the     <code>&lt;API-M_2.0.0_HOME&gt;/repository/deployment/server/synapse-configs/default</code>.<code></code></li> </ol> <p>NOTE: </p> <p>Do not replace the files listed below from the    <code>&lt;CURRENT_API-M_HOME&gt;/repository/deployment/server/synapse-configs/default</code>    folder to APIM 2.0.0. These are application-specific APIs and    sequences. If you made any custom changes to the files below, please    merge them to the corresponding files in 2.0.0.</p> <p><code>/api/_AuthorizeAPI_.xml</code> <code>/api/_RevokeAPI_.xml</code> <code>/api/_TokenAPI_.xml</code> <code>/api/_UserInfoAPI_.xml</code> <code>/sequences/_auth_failure_handler_.xml</code> <code>/sequences/_build_.xml</code> <code>/sequences/_cors_request_handler_.xml</code> <code>/sequences/fault.xml</code> <code>/sequences/main.xml</code> <code>/sequences/_production_key_error_.xml</code> <code>/sequences/_resource_mismatch_handler_.xml</code> <code>/sequences/_sandbox_key_error_.xml</code> <code>/sequences/_throttle_out_handler_.xml</code> <code>/sequences/_token_fault_.xml</code> <code>/proxy-services/WorkflowCallbackService.xml</code></p> <ol> <li>Move all your tenant synapse configurations by updating the     configurations made in the\u00a0<code>&lt;CURRENT_API-M_HOME&gt;/repository/tenants</code>     directory to the\u00a0<code>&lt;API-M_2.0.0_HOME&gt;/repository/tenants</code> directory.</li> </ol> <p>NOTE: Get the files listed below from    the\u00a0<code>&lt;API-M_2.0.0_HOME&gt;/repository/deployment/server/synapse-configs/default/sequences</code>    directory and replace the corresponding files in the    <code>&lt;API-M_2.0.0_HOME&gt;/repository/tenants/&lt;tenant-id&gt;/synapse-configs/default/sequences</code>    directory.</p> <p><code>_auth_failure_handler_.xml</code> <code>_build_.xml</code> <code>_cors_request_handler_.xml</code> <code>fault.xml</code> <code>main.xml</code> <code>_production_key_error_.xml</code> <code>_resource_mismatch_handler_.xml</code> <code>_sandbox_key_error_.xml</code> <code>_throttle_out_handler_.xml</code> <code>_token_fault_.xml</code></p> <ol> <li>If you have documentation defined for your APIs, make sure you add a     value to the Documentation Summary field.\u00a0     Documentation summary is mandatory in APIM 2.0 onwards. Trying to     migrate with an empty documentation summary field from an older     version can cause issues in the migration.\u00a0</li> </ol>"},{"location":"API-M%201.8.0/1.9.0/1.9.1/1.10.0%20to%202.0.0/#upgrading-the-api-manager-to-200","title":"Upgrading the API Manager to 2.0.0","text":"<ol> <li> <p>Stop all running API Manager server instances.</p> </li> <li> <p>Make sure you backed up all the databases and synapse configs as     instructed in step 1 of the previous section.</p> </li> <li> <p>Before you run the migration client,\u00a0open the     <code>&lt;API-M_2.0.0_HOME&gt;/repository/conf/datasources/master-datasources.xml</code>     file, and set the <code>&lt;username&gt;</code>, and <code>&lt;password&gt;</code> elements of     the\u00a0<code>AM_DB</code> JNDI to that of a user who has permissions to alter     tables in the database.</p> </li> </ol> <p>Tip: After you are done running the migration client, you can switch these credentials back to a user with lesser privileges.</p> <p>For example,</p> <p><code>java    &lt;datasource&gt;            ...            &lt;definition type=\"RDBMS\"&gt;                &lt;configuration&gt;                    ...                    &lt;username&gt;xxxxxx&lt;/username&gt;                    &lt;password&gt;xxxxxx&lt;/password&gt;                    ...                &lt;/configuration&gt;             &lt;/definition&gt;    &lt;/datasource&gt;</code></p> <ol> <li> <p>Download and extract the\u00a0<code>wso2-api-migration-client.zip</code>\u00a0and do the following:</p> <ol> <li>Copy the\u00a0<code>org.wso2.carbon.apimgt.migrate.client-2.0.X.jar</code>\u00a0file to     the\u00a0<code>&lt;API-M_2.0.0_HOME&gt;/repository/components/dropins</code>\u00a0directory.     If you use a\u00a0clustered/distributed API Manager setup, copy     the JAR file to a Publisher and a Gateway nodes.</li> <li> <p>Copy the\u00a0<code>migration-script</code>\u00a0folder into\u00a0<code>&lt;API-M_2.0.0_HOME&gt;</code>.\u00a0If     you use a clustered/distributed API Manager setup, copy the     <code>migration-script</code> folder to a Publisher node.</p> <ol> <li> <p>Start API Manager 2.0.0 with the following command-line     options to migrate the database, registry and the file     system separately in the given order.</p> <p> Command Description <code>-DmigrateDB=true\u00a0-Dcomponent=apim -DmigrateFromVersion=&lt;CURRENT_API-M_VERSION&gt;</code> To migrate the database only. This migrates the\u00a0<code>AM_DB</code> database. Please ensure that the <code>&lt;API-M_PUBLISHER&gt;/repository/conf/datasources/master-datasources.xml</code> file has an entry for <code>AM_DB</code>. <code>-DmigrateReg=true -Dcomponent=apim -DmigrateFromVersion=&lt;CURRENT_API-M_VERSION&gt;</code> To migrate the registry only.\u00a0 This migrates the registry-related resources such as <code>.rxt</code> and swagger definitions. <code>-DmigrateFS=true\u00a0-Dcomponent=apim -DmigrateFromVersion=&lt;CURRENT_API-M_VERSION&gt;</code> To migrate the file system only.\u00a0 This migrates the synapse config files such as APIs that reside in the file system. Therefore, you must run this command on the Gateway node/s of a distributed API Manager setup.  &lt;td <p><code>-Dcomponent=apim -DmigrateFromVersion=&lt;CURRENT_API-M_VERSION&gt; -Doptions=migrateThrottling</code> <p>To migrate to the new throttling engine and generate throttle policies.</p> <p>This migrates synapse config files, the APIM database with new throttle policies and generates throttle policies to the <code>&lt;API-M_HOME&gt;/executionplans</code> directory. Therefore, you must run this command against a node that has synapse config files and the AM_DB. After the migration, copy the <code>&lt;API-M_HOME&gt;/executionplans</code> directory to the <code>repository/deployment/server/executionplans</code> directory of the Traffic Manager node. \u00a0</p> <p>Note that you need to use either this command or the one below in order to migrate to the new throttling engine of APIM 2.0.0.</p>  &lt;td <code>-Dcomponent=apim -DmigrateFromVersion=&lt;CURRENT_API-M_VERSION&gt; -Doptions=migrateThrottling,deployPolicies</code> <p>To migrate to the new throttling engine and deploy throttle policies to the Traffic Manager node.</p> <p>This migrates synapse config files, the APIM database with new throttle policies and deploys policies to the Traffic Manager node. Therefore, you must run this command against a node that has synapse config files, the <code>AM_DB</code> and is pointed to the Traffic Manager node.</p> <p>Use this command if you want to deploy the throttle policies directly to the Traffic Manager node while performing the migration. </p> </p> <p>TIP:</p> <p>If you are using a clustered/distributed API Manager    setup, run with the following options    <code>-DmigrateDB=true -DmigrateReg=true\u00a0-Dcomponent=apim -DmigrateFromVersion=&lt;CURRENT_API-M_VERSION&gt;</code>    in the API Publisher node and the    <code>-DmigrateFS=true -Dcomponent=apim -DmigrateFromVersion=&lt;CURRENT_API-M_VERSION&gt;</code>    options in the API Gateway node.</p> <p>TIP:</p> <p>To migrate to the new throttling engine of APIM 2.0.0, you    have to use a node which has AM_DB pointed as well as API    gateway synapse configurations in place in the file system.    If you use only \"migrateThrottling\" option, you can use API    Gateway node. Make sure that AM_DB is pointed to the gateway    during the migration time. You can the start the gateway    server with the    <code>-Dcomponent=apim -DmigrateFromVersion=&lt;CURRENT_API-M_VERSION&gt; -Doptions=migrateThrottling</code>    command. After completing this execution, make sure you copy    the generated throttle policies in the    <code>&lt;API-M_HOME&gt;/executionplans</code> directory to the    <code>&lt;API-M_TRAFFIC_MANAGER&gt;/repository/deployment/server/executionplans</code>    directory.</p> <p>NOTE:</p> <p>If you use both the <code>migrateThrottling,deployPolicies</code>    options, make sure that the Traffic Manager node is    configured with the Gateway node and also make sure you    avoid passing the -Dprofile option while performing the    migration. With these options, you don't have to manually    copy the throttling policies to the traffic manager. You can    the start the gateway server with    <code>-Dcomponent=apim -DmigrateFromVersion=&lt;CURRENT_API-M_VERSION&gt; -Doptions=migrateThrottling,deployPolicies</code> command. \u00a0</p> <p>NOTE:</p> <p>If you have enabled token    encryption    in your database, as part of database migration, those    consumer keys need to be decrypted. If you see the error    below, it means that the migration client has failed to    decrypt some of the keys in the old database.</p> <p><code>TID: [-1234] [] [2016-04-11 08:27:16,249] ERROR {org.wso2.carbon.apimgt.migration.client.MigrateFrom19to110} -\u00a0 Cannot decrypt consumer key : DRHbt68uSU4+7xtCEIzuf42CMaqXbNjYl3OYVJ0VL/H6EsFo8GBRaZGUhLHlTWIHzYrvoeOpb1YbauvRRIN/b6VqEd9m8HuYOIuLkkDd AM_APPLICATION_KEY_MAPPING table {org.wso2.carbon.apimgt.migration.client.MigrateFrom19to110}</code></p> <p>If this occurs, by default, the migration client will    terminate without updating databases in order to maintain    database integrity. However, you can change this behavior by    adding the following argument and running the APIM migration    client again from the beginning.\u00a0Please note that the    database is then updated with the keys    where\u00a0decryption\u00a0was\u00a0successful and failed keys    are\u00a0permanently\u00a0deleted. <code>-DremoveDecryptionFailedKeysFromDB=true</code></p> <p>INFO:</p> <p>You may notice the following exception being thrown in the    console when API Manager 2.0.0 is started at this point,</p> <p>org.wso2.carbon.idp.mgt.IdentityProviderManagementException:    Error occurred while retrieving Identity Provider    information for tenant : carbon.super and Identity Provider    name : LOCAL</p> <p>This is due to the fact that the <code>IDP_METADATA</code> table does    not exist in the API Manager database. This is not a cause    for alarm and is to be expected since we are yet to complete    the migration process. The instructions given from step    9 onwards will address the creation of the <code>IDP_METADATA</code>    table after which this exception will no longer be thrown.</p> <li> <p>Do the following to re-index the artifacts in the registry:</p> <ol> <li> <p>Rename the <code>&lt;lastAccessTimeLocation&gt;</code> element in     the\u00a0<code>&lt;API-M_2.0.0_HOME&gt;</code>/<code>repository/conf/registry.xml</code>\u00a0file. If     you use a\u00a0clustered/distributed API Manager setup, change     the file in the API Publisher node. For example,\u00a0change     the\u00a0<code>/_system/local/repository/components/org.wso2.carbon.registry/indexing/lastaccesstime</code>\u00a0registry     path     to\u00a0<code>/_system/local/repository/components/org.wso2.carbon.registry/indexing/lastaccesstime_1</code><code>.</code><code></code></p> </li> <li> <p>Shut down the API Manager 2.0.0, back up and delete the     <code>&lt;API-M_2.0.0_HOME&gt;</code>/<code>solr</code> directory.</p> </li> </ol> <p>Steps 6,7 and 8 needs to be executed ONLY if the setup is migrating from 1.8.0, 1.9.0 or 1.9.1. If the current setup is in 1.10.0, steps 6, 7 and 8 are NOT required to be executed.</p> </li> <li> <p>Execute the following update queries against the <code>WSO2AM_DB</code> to     set\u00a0the <code>GRANT_TYPE</code> column of the <code>IDN_OAUTH_CONSUMER_APPS</code> table:</p> <p>``` java UPDATE IDN_OAUTH_CONSUMER_APPS set GRANT_TYPES='refresh_token urn:ietf:params:oauth:grant-type:saml2-bearer implicit password iwa:ntlm client_credentials authorization_code' where CALLBACK_URL is not NULL; </p> <p>UPDATE IDN_OAUTH_CONSUMER_APPS set GRANT_TYPES='refresh_token urn:ietf:params:oauth:grant-type:saml2-bearer password iwa:ntlm client_credentials' where CALLBACK_URL is NULL; ```</p> </li> <li> <p>Download the      <code>org.wso2.carbon.is.migrate.client-5.1.0-migration.zip</code> WSO2 Identity Server     Migration Client. This is required to migrate the Identity and     User Store Database schemas that is used by API Manager. Unzip the     downloaded file to the local file system where     the\u00a0<code>wso2is-5.1.0-migration</code>\u00a0directory is created and do the     following:</p> <p>INFO:</p> <p>If you are running in a distributed setup, ensure that this step is only carried out for the Key Manager node.</p> <p>If you are running WSO2 Identity Server as a Key Manager in a distributed setup, first follow the instructions in Configuring the Identity Server 5.2.0 as a Key Manager with API Manager 2.0.0 before following the steps below. Make sure that the additional configurations you made in the following files for WSO2 Identity Server 5.1.0 are redone in the Identity Server 5.2.0 configuration files,</p> <p><code>master-datasources.xml</code>, <code>registry.xml</code>, <code>user-mgt.xml</code>, <code>api-manager.xml</code></p> <p>a. Copy the \\&lt;<code>wso2is-5.1.0-migration&gt;/dbscripts/migration\u00ad5.0.0_to_5.1.0</code> directory to the <code>&lt;``API-M_2.0.0_HOME``&gt;/dbscripts</code>\u00a0directory.</p> <p>If you are using MySQL 5.7, carryout the following steps before proceeding to the next step.</p> <ol> <li> <p>Navigate to the \\&lt;<code>wso2is-5.1.0-migration&gt;/dbscripts/identity/migration\u00ad5.0.0SP1_to_5.1.0</code> directory.</p> </li> <li> <p>Rename the <code>mysql.sql</code> file to <code>mysql_old.sql</code> or a name of your choice.</p> </li> <li> <p>Rename the <code>mysql_57.sql</code> file to - <code>mysql.sql</code></p> </li> </ol> <p>b. Copy the \\&lt;<code>wso2is-5.1.0-migration&gt;/</code> <code>dbscripts/identity/migration\u00ad5.0.0SP1_to_5.1.0</code> directory and the \u00a0\\&lt;<code>wso2is-5.1.0-migration&gt;/</code> <code>dbscripts/identity/migration\u00ad5.0.0_to_5.0.0SP1</code> directory to the <code>&lt;``API-M_2.0.0_HOME``&gt;/dbscripts/identity</code>\u00a0directory. \u00a0\u00a0\u00a0\u00a0\u00a0 c. Copy the \\&lt;<code>wso2is-5.1.0-migration&gt;``/dropins/org.wso2.carbon.is.migrate.client-\u00ad5.1.0.jar</code> file to the\u00a0<code>&lt;``API-M_2.0.0_HOME``&gt;/repository/components/dropins</code>\u00a0directory. \u00a0 \u00a0</p> </li> <li> <p>Before executing identity migration as given in the step below,     verify whether the API Manager database has the <code>IDN_ASSOCIATED_ID</code>     table. To do that, connect to the API Manager database and check     whether the <code>IDN_ASSOCIATED_ID</code> table exists. If not, download     the\u00a0<code>IDN-table.zip</code> file and run the relevant script according to your RDBMS against your API     Manager DB.\u00a0\u00a0</p> </li> <li> <p>Start API Manager 2.0.0 with the command line     option\u00a0<code>-Dmigrate -Dcomponent=identity</code> to carry out the complete     Identity and User Store DB migration. Alternatively, you can run it     step by step by starting the server with the command line options     given below in the following order.\u00a0</p> <ul> <li><code>-Dmigrate\u00a0-DmigrateIdentityDB\u00a0-Dcomponent=identity</code></li> <li><code>-Dmigrate\u00a0-DmigrateUMDB\u00a0-Dcomponent=identity</code></li> <li><code>-Dmigrate\u00a0-DmigrateIdentityData\u00a0-Dcomponent=identity</code></li> <li><code>-Dmigrate\u00a0-DmigrateIdentityDBFinalize\u00a0-Dcomponent=identity</code></li> <li><code>-Dmigrate\u00a0-DmigrateUMData\u00a0-Dcomponent=identity</code> </li> </ul> </li> <li> <p>Upgrading to IS 5.2.0 from 5.1.0</p> <ol> <li> <p>Download 5.1.0 to 5.2.0 migration DB scripts     <code>wso2is-5.2.0-migration.zip</code>.</p> </li> <li> <p>Unzip and copy it to     the\u00a0<code>&lt;API-M_2.0.0_HOME&gt;/dbscripts/identity</code>\u00a0directory.     Copying the DB scripts are optional as it is done for reference     purposes to indicate the version to which you have upgraded your     APIM IS component.</p> </li> <li> <p>Execute the DB scripts, which corresponds to the RDBMS that you     are working with,\u00a0manually.</p> <p>Apply the respective DB script that is inside the following directories against the respective DB as follows:</p> <p> DB script directory Applicable DB Description  &lt;td <p><code>&lt;wso2is-5.2.0-migration&gt;/dbscripts/identity/migration-5.1.0_to_5.2.0 </code> <code>AM_DB</code>  &lt;td <code>&lt;wso2is-5.2.0-migration&gt;/dbscripts/migration-5.1.0_to_5.2.0 </code> <code>UM_DB</code> This script includes insert operations and some index creation scripts against the\u00a0<code>UM_CLAIM</code>\u00a0table which are required in order for you to upgrade from your previous APIM version to API-M 2.0.0. </p> <p>For example, if you are working with a MySQL DB run the\u00a0<code>mysql.sql</code> script.</p> <p>During the Identity and User Store DB migration, you may notice warning messages similar to the following:</p> <p><code>[2016-07-22 07:14:49,386] WARN - AppDeployerServiceComponent Waiting for required OSGi services: org.wso2.carbon.application.deployer.synapse.service.&gt;SynapseAppDeployerService,org.wso2.carbon.mediation.</code> <code>initializer.services.SynapseEnvironmentService, [2016-07-22 07:14:49,418] WARN - StartupFinalizerServiceComponent Waiting for required OSGi services: org.&gt;wso2.carbon.application.deployer.service.CappDeploymentService,org.wso2.carbon.server.admin.</code> <code>common.IServerAdmin,org.wso2.carbon.throttling.agent.ThrottlingAgent,</code></p> <p>Do not abort the migration process at this point as data migration is still happening in the background and aborting could result in data corruption. The time taken to finish depends on the amount of tokens in the database and could take hours depending on the amount of data.</p> <p>This concludes the upgrade process.</p> <p>Tip: </p> <p>The migration client that you use in this guide automatically migrates your tenants, workflows, external user stores etc. to the upgrade environment. There is no need to migrate them manually.</p>"},{"location":"API-M%201.8.0/1.9.0/1.9.1/1.10.0%20to%202.0.0/#data-migration-of-statistics-from-wso2-das-to-api-manager-analytics","title":"Data migration of statistics from WSO2 DAS to API Manager Analytics","text":"<p>From APIM 2.0.0 onwards, statistics can be configured only for RDBMS since the API Manager 1.10.0 REST based analytics configuration no longer exists. This section walks you through how to migrate statistics data from previous versions of API Manager to 2.0.0.\u00a0</p> <p>If you have configured analytics using RDBMS,</p> <ol> <li>Download and extract the <code>wso2-api-stat-migration.zip</code> file.\u00a0</li> <li>Take a backup of the API Manager statistics DB.\u00a0</li> <li>Execute the relevant script in the     <code>&lt;wso2-api-stat-migration&gt;/dbscripts</code> directory against your API     Manager statistics DB.\u00a0</li> <li>Add the API Manager statistics DB as a datasource in WSO2 API     Manager Analytics.</li> </ol> <p>If you configured analytics using the REST client in APIM 1.10.0 with DAS 3.0.x,</p> <ol> <li>Configure analytics using API Manager 1.10.0 and DAS 3.0.x with the     RDBMS client according to the instructions in Publishing API     Runtime Statistics Using     RDBMS.</li> <li>Wait for data to appear on the RDBMS and API Manager statistics     dashboard.</li> <li>Add the API Manager statistics DB as a datasource in WSO2 API     Manager Analytics.</li> </ol> <p>Finally, execute relevant db script found in the\u00a0<code>migration-scripts/110-200-migration/stat/</code> directory on the STAT_DB.</p> <p>Once done, configure analytics in API Manager 2.0.0 according to the instructions in Configuring APIM Analytics.</p>"},{"location":"API-M%202.0.0/upgrading-from-190-to-200/","title":"Upgrading from the Previous Release","text":"<p>The following information describes how to upgrade your API Manager server from API-M 1.8.0/1.9.0/1.9.1/1.10.0 to 2.0.0.\u00a0</p> <p>To upgrade from a version older than 1.8.0, follow the instructions in the document that was released immediately after your current release and upgrade incrementally.</p> <ul> <li>Migrating the configurations</li> <li>Upgrading the API Manager to 2.0.0</li> <li>Data migration of statistics from WSO2 DAS to API Manager Analytics</li> </ul>"},{"location":"API-M%202.0.0/upgrading-from-190-to-200/#migrating-the-configurations","title":"Migrating the configurations","text":"<p>NOTE:</p> <p>Do not copy entire configuration files from the current version of API Manager to the new one as some configuration files (for example, <code>api-manager.xml</code>) may have changed. Instead, redo the configuration changes in the new configuration files.</p> <p>In this section, you move all existing API Manager configurations from the current environment to the new one.</p> <ol> <li> <p>Back up all databases in your API Manager instances along with the     synapse configs of all the tenants and super tenant.     You find the synapse configs of the super tenant in the     <code>&lt;CURRENT_API-M_HOME&gt;/repository/deployment/server/synapse-configs/default</code>     directory. Synapse configs of tenants are in     the\u00a0<code>&lt;CURRENT_API-M_HOME&gt;/repository/tenants</code>\u00a0directory.\u00a0     If you use a\u00a0clustered/distributed API Manager setup, back up     the available configurations in the API Gateway node.</p> </li> <li> <p>Download API Manager 2.0.0     from\u00a0http://wso2.com/products/api-manager/.</p> </li> <li> <p>Open     the\u00a0<code>&lt;API-M_2.0.0_HOME&gt;/repository/conf/datasources/master-datasources.xml</code>\u00a0file     and provide the datasource configurations for the following     databases. You can copy the configuration values from the same file     in the current API Manager instance already being used.</p> <ul> <li>User Store</li> <li>Registry database/s</li> <li>API Manager Databases</li> </ul> </li> <li> <p>Edit the registry configurations in     the\u00a0<code>&lt;API-M_2.0.0_HOME&gt;/repository/conf/registry.xml</code> file and the     user database in     the\u00a0<code>&lt;API-M_2.0.0_HOME&gt;/repository/conf/user-mgt.xml</code>\u00a0file similar     to the configurations of the current API Manager.</p> </li> </ol> <p>Note that in a clustered/distributed API Manager setup, step 5    and 6 need to be done on the Gateway node.</p> <ol> <li>Move all your synapse configurations except the files mentioned     below by copying and replacing     the\u00a0<code>&lt;CURRENT_API-M_HOME&gt;/repository/deployment/server/synapse-configs/default</code>\u00a0directory     to the     <code>&lt;API-M_2.0.0_HOME&gt;/repository/deployment/server/synapse-configs/default</code>.<code></code></li> </ol> <p>NOTE: </p> <p>Do not replace the files listed below from the    <code>&lt;CURRENT_API-M_HOME&gt;/repository/deployment/server/synapse-configs/default</code>    folder to APIM 2.0.0. These are application-specific APIs and    sequences. If you made any custom changes to the files below, please    merge them to the corresponding files in 2.0.0.</p> <p><code>/api/_AuthorizeAPI_.xml</code> <code>/api/_RevokeAPI_.xml</code> <code>/api/_TokenAPI_.xml</code> <code>/api/_UserInfoAPI_.xml</code> <code>/sequences/_auth_failure_handler_.xml</code> <code>/sequences/_build_.xml</code> <code>/sequences/_cors_request_handler_.xml</code> <code>/sequences/fault.xml</code> <code>/sequences/main.xml</code> <code>/sequences/_production_key_error_.xml</code> <code>/sequences/_resource_mismatch_handler_.xml</code> <code>/sequences/_sandbox_key_error_.xml</code> <code>/sequences/_throttle_out_handler_.xml</code> <code>/sequences/_token_fault_.xml</code> <code>/proxy-services/WorkflowCallbackService.xml</code></p> <ol> <li>Move all your tenant synapse configurations by updating the     configurations made in the\u00a0<code>&lt;CURRENT_API-M_HOME&gt;/repository/tenants</code>     directory to the\u00a0<code>&lt;API-M_2.0.0_HOME&gt;/repository/tenants</code> directory.</li> </ol> <p>NOTE: Get the files listed below from    the\u00a0<code>&lt;API-M_2.0.0_HOME&gt;/repository/deployment/server/synapse-configs/default/sequences</code>    directory and replace the corresponding files in the    <code>&lt;API-M_2.0.0_HOME&gt;/repository/tenants/&lt;tenant-id&gt;/synapse-configs/default/sequences</code>    directory.</p> <p><code>_auth_failure_handler_.xml</code> <code>_build_.xml</code> <code>_cors_request_handler_.xml</code> <code>fault.xml</code> <code>main.xml</code> <code>_production_key_error_.xml</code> <code>_resource_mismatch_handler_.xml</code> <code>_sandbox_key_error_.xml</code> <code>_throttle_out_handler_.xml</code> <code>_token_fault_.xml</code></p> <ol> <li>If you have documentation defined for your APIs, make sure you add a     value to the Documentation Summary field.\u00a0     Documentation summary is mandatory in APIM 2.0 onwards. Trying to     migrate with an empty documentation summary field from an older     version can cause issues in the migration.\u00a0</li> </ol>"},{"location":"API-M%202.0.0/upgrading-from-190-to-200/#upgrading-the-api-manager-to-200","title":"Upgrading the API Manager to 2.0.0","text":"<ol> <li> <p>Stop all running API Manager server instances.</p> </li> <li> <p>Make sure you backed up all the databases and synapse configs as     instructed in step 1 of the previous section.</p> </li> <li> <p>Before you run the migration client,\u00a0open the     <code>&lt;API-M_2.0.0_HOME&gt;/repository/conf/datasources/master-datasources.xml</code>     file, and set the <code>&lt;username&gt;</code>, and <code>&lt;password&gt;</code> elements of     the\u00a0<code>AM_DB</code> JNDI to that of a user who has permissions to alter     tables in the database.</p> </li> </ol> <p>Tip: After you are done running the migration client, you can switch these credentials back to a user with lesser privileges.</p> <p>For example,</p> <p><code>java    &lt;datasource&gt;            ...            &lt;definition type=\"RDBMS\"&gt;                &lt;configuration&gt;                    ...                    &lt;username&gt;xxxxxx&lt;/username&gt;                    &lt;password&gt;xxxxxx&lt;/password&gt;                    ...                &lt;/configuration&gt;             &lt;/definition&gt;    &lt;/datasource&gt;</code></p> <ol> <li> <p>Download and extract the\u00a0<code>wso2-api-migration-client.zip</code>\u00a0and do the following:</p> <ol> <li>Copy the\u00a0<code>org.wso2.carbon.apimgt.migrate.client-2.0.X.jar</code>\u00a0file to     the\u00a0<code>&lt;API-M_2.0.0_HOME&gt;/repository/components/dropins</code>\u00a0directory.     If you use a\u00a0clustered/distributed API Manager setup, copy     the JAR file to a Publisher and a Gateway nodes.</li> <li> <p>Copy the\u00a0<code>migration-script</code>\u00a0folder into\u00a0<code>&lt;API-M_2.0.0_HOME&gt;</code>.\u00a0If     you use a clustered/distributed API Manager setup, copy the     <code>migration-script</code> folder to a Publisher node.</p> <ol> <li> <p>Start API Manager 2.0.0 with the following command-line     options to migrate the database, registry and the file     system separately in the given order.</p> <p> Command Description <code>-DmigrateDB=true\u00a0-Dcomponent=apim -DmigrateFromVersion=&lt;CURRENT_API-M_VERSION&gt;</code> To migrate the database only. This migrates the\u00a0<code>AM_DB</code> database. Please ensure that the <code>&lt;API-M_PUBLISHER&gt;/repository/conf/datasources/master-datasources.xml</code> file has an entry for <code>AM_DB</code>. <code>-DmigrateReg=true -Dcomponent=apim -DmigrateFromVersion=&lt;CURRENT_API-M_VERSION&gt;</code> To migrate the registry only.\u00a0 This migrates the registry-related resources such as <code>.rxt</code> and swagger definitions. <code>-DmigrateFS=true\u00a0-Dcomponent=apim -DmigrateFromVersion=&lt;CURRENT_API-M_VERSION&gt;</code> To migrate the file system only.\u00a0 This migrates the synapse config files such as APIs that reside in the file system. Therefore, you must run this command on the Gateway node/s of a distributed API Manager setup.  &lt;td <p><code>-Dcomponent=apim -DmigrateFromVersion=&lt;CURRENT_API-M_VERSION&gt; -Doptions=migrateThrottling</code> <p>To migrate to the new throttling engine and generate throttle policies.</p> <p>This migrates synapse config files, the APIM database with new throttle policies and generates throttle policies to the <code>&lt;API-M_HOME&gt;/executionplans</code> directory. Therefore, you must run this command against a node that has synapse config files and the AM_DB. After the migration, copy the <code>&lt;API-M_HOME&gt;/executionplans</code> directory to the <code>repository/deployment/server/executionplans</code> directory of the Traffic Manager node. \u00a0</p> <p>Note that you need to use either this command or the one below in order to migrate to the new throttling engine of APIM 2.0.0.</p>  &lt;td <code>-Dcomponent=apim -DmigrateFromVersion=&lt;CURRENT_API-M_VERSION&gt; -Doptions=migrateThrottling,deployPolicies</code> <p>To migrate to the new throttling engine and deploy throttle policies to the Traffic Manager node.</p> <p>This migrates synapse config files, the APIM database with new throttle policies and deploys policies to the Traffic Manager node. Therefore, you must run this command against a node that has synapse config files, the <code>AM_DB</code> and is pointed to the Traffic Manager node.</p> <p>Use this command if you want to deploy the throttle policies directly to the Traffic Manager node while performing the migration. </p> </p> <p>TIP:</p> <p>If you are using a clustered/distributed API Manager    setup, run with the following options    <code>-DmigrateDB=true -DmigrateReg=true\u00a0-Dcomponent=apim -DmigrateFromVersion=&lt;CURRENT_API-M_VERSION&gt;</code>    in the API Publisher node and the    <code>-DmigrateFS=true -Dcomponent=apim -DmigrateFromVersion=&lt;CURRENT_API-M_VERSION&gt;</code>    options in the API Gateway node.</p> <p>TIP:</p> <p>To migrate to the new throttling engine of APIM 2.0.0, you    have to use a node which has AM_DB pointed as well as API    gateway synapse configurations in place in the file system.    If you use only \"migrateThrottling\" option, you can use API    Gateway node. Make sure that AM_DB is pointed to the gateway    during the migration time. You can the start the gateway    server with the    <code>-Dcomponent=apim -DmigrateFromVersion=&lt;CURRENT_API-M_VERSION&gt; -Doptions=migrateThrottling</code>    command. After completing this execution, make sure you copy    the generated throttle policies in the    <code>&lt;API-M_HOME&gt;/executionplans</code> directory to the    <code>&lt;API-M_TRAFFIC_MANAGER&gt;/repository/deployment/server/executionplans</code>    directory.</p> <p>NOTE:</p> <p>If you use both the <code>migrateThrottling,deployPolicies</code>    options, make sure that the Traffic Manager node is    configured with the Gateway node and also make sure you    avoid passing the -Dprofile option while performing the    migration. With these options, you don't have to manually    copy the throttling policies to the traffic manager. You can    the start the gateway server with    <code>-Dcomponent=apim -DmigrateFromVersion=&lt;CURRENT_API-M_VERSION&gt; -Doptions=migrateThrottling,deployPolicies</code> command. \u00a0</p> <p>NOTE:</p> <p>If you have enabled token    encryption    in your database, as part of database migration, those    consumer keys need to be decrypted. If you see the error    below, it means that the migration client has failed to    decrypt some of the keys in the old database.</p> <p><code>TID: [-1234] [] [2016-04-11 08:27:16,249] ERROR {org.wso2.carbon.apimgt.migration.client.MigrateFrom19to110} -\u00a0 Cannot decrypt consumer key : DRHbt68uSU4+7xtCEIzuf42CMaqXbNjYl3OYVJ0VL/H6EsFo8GBRaZGUhLHlTWIHzYrvoeOpb1YbauvRRIN/b6VqEd9m8HuYOIuLkkDd AM_APPLICATION_KEY_MAPPING table {org.wso2.carbon.apimgt.migration.client.MigrateFrom19to110}</code></p> <p>If this occurs, by default, the migration client will    terminate without updating databases in order to maintain    database integrity. However, you can change this behavior by    adding the following argument and running the APIM migration    client again from the beginning.\u00a0Please note that the    database is then updated with the keys    where\u00a0decryption\u00a0was\u00a0successful and failed keys    are\u00a0permanently\u00a0deleted. <code>-DremoveDecryptionFailedKeysFromDB=true</code></p> <p>INFO:</p> <p>You may notice the following exception being thrown in the    console when API Manager 2.0.0 is started at this point,</p> <p>org.wso2.carbon.idp.mgt.IdentityProviderManagementException:    Error occurred while retrieving Identity Provider    information for tenant : carbon.super and Identity Provider    name : LOCAL</p> <p>This is due to the fact that the <code>IDP_METADATA</code> table does    not exist in the API Manager database. This is not a cause    for alarm and is to be expected since we are yet to complete    the migration process. The instructions given from step    9 onwards will address the creation of the <code>IDP_METADATA</code>    table after which this exception will no longer be thrown.</p> <li> <p>Do the following to re-index the artifacts in the registry:</p> <ol> <li> <p>Rename the <code>&lt;lastAccessTimeLocation&gt;</code> element in     the\u00a0<code>&lt;API-M_2.0.0_HOME&gt;</code>/<code>repository/conf/registry.xml</code>\u00a0file. If     you use a\u00a0clustered/distributed API Manager setup, change     the file in the API Publisher node. For example,\u00a0change     the\u00a0<code>/_system/local/repository/components/org.wso2.carbon.registry/indexing/lastaccesstime</code>\u00a0registry     path     to\u00a0<code>/_system/local/repository/components/org.wso2.carbon.registry/indexing/lastaccesstime_1</code><code>.</code><code></code></p> </li> <li> <p>Shut down the API Manager 2.0.0, back up and delete the     <code>&lt;API-M_2.0.0_HOME&gt;</code>/<code>solr</code> directory.</p> </li> </ol> <p>Steps 6,7 and 8 needs to be executed ONLY if the setup is migrating from 1.8.0, 1.9.0 or 1.9.1. If the current setup is in 1.10.0, steps 6, 7 and 8 are NOT required to be executed.</p> </li> <li> <p>Execute the following update queries against the <code>WSO2AM_DB</code> to     set\u00a0the <code>GRANT_TYPE</code> column of the <code>IDN_OAUTH_CONSUMER_APPS</code> table:</p> <p>``` java UPDATE IDN_OAUTH_CONSUMER_APPS set GRANT_TYPES='refresh_token urn:ietf:params:oauth:grant-type:saml2-bearer implicit password iwa:ntlm client_credentials authorization_code' where CALLBACK_URL is not NULL; </p> <p>UPDATE IDN_OAUTH_CONSUMER_APPS set GRANT_TYPES='refresh_token urn:ietf:params:oauth:grant-type:saml2-bearer password iwa:ntlm client_credentials' where CALLBACK_URL is NULL; ```</p> </li> <li> <p>Download the      <code>org.wso2.carbon.is.migrate.client-5.1.0-migration.zip</code> WSO2 Identity Server     Migration Client. This is required to migrate the Identity and     User Store Database schemas that is used by API Manager. Unzip the     downloaded file to the local file system where     the\u00a0<code>wso2is-5.1.0-migration</code>\u00a0directory is created and do the     following:</p> <p>INFO:</p> <p>If you are running in a distributed setup, ensure that this step is only carried out for the Key Manager node.</p> <p>If you are running WSO2 Identity Server as a Key Manager in a distributed setup, first follow the instructions in Configuring the Identity Server 5.2.0 as a Key Manager with API Manager 2.0.0 before following the steps below. Make sure that the additional configurations you made in the following files for WSO2 Identity Server 5.1.0 are redone in the Identity Server 5.2.0 configuration files,</p> <p><code>master-datasources.xml</code>, <code>registry.xml</code>, <code>user-mgt.xml</code>, <code>api-manager.xml</code></p> <p>a. Copy the \\&lt;<code>wso2is-5.1.0-migration&gt;/dbscripts/migration\u00ad5.0.0_to_5.1.0</code> directory to the <code>&lt;``API-M_2.0.0_HOME``&gt;/dbscripts</code>\u00a0directory.</p> <p>If you are using MySQL 5.7, carryout the following steps before proceeding to the next step.</p> <ol> <li> <p>Navigate to the \\&lt;<code>wso2is-5.1.0-migration&gt;/dbscripts/identity/migration\u00ad5.0.0SP1_to_5.1.0</code> directory.</p> </li> <li> <p>Rename the <code>mysql.sql</code> file to <code>mysql_old.sql</code> or a name of your choice.</p> </li> <li> <p>Rename the <code>mysql_57.sql</code> file to - <code>mysql.sql</code></p> </li> </ol> <p>b. Copy the \\&lt;<code>wso2is-5.1.0-migration&gt;/</code> <code>dbscripts/identity/migration\u00ad5.0.0SP1_to_5.1.0</code> directory and the \u00a0\\&lt;<code>wso2is-5.1.0-migration&gt;/</code> <code>dbscripts/identity/migration\u00ad5.0.0_to_5.0.0SP1</code> directory to the <code>&lt;``API-M_2.0.0_HOME``&gt;/dbscripts/identity</code>\u00a0directory. \u00a0\u00a0\u00a0\u00a0\u00a0 c. Copy the \\&lt;<code>wso2is-5.1.0-migration&gt;``/dropins/org.wso2.carbon.is.migrate.client-\u00ad5.1.0.jar</code> file to the\u00a0<code>&lt;``API-M_2.0.0_HOME``&gt;/repository/components/dropins</code>\u00a0directory. \u00a0 \u00a0</p> </li> <li> <p>Before executing identity migration as given in the step below,     verify whether the API Manager database has the <code>IDN_ASSOCIATED_ID</code>     table. To do that, connect to the API Manager database and check     whether the <code>IDN_ASSOCIATED_ID</code> table exists. If not, download     the\u00a0<code>IDN-table.zip</code> file and run the relevant script according to your RDBMS against your API     Manager DB.\u00a0\u00a0</p> </li> <li> <p>Start API Manager 2.0.0 with the command line     option\u00a0<code>-Dmigrate -Dcomponent=identity</code> to carry out the complete     Identity and User Store DB migration. Alternatively, you can run it     step by step by starting the server with the command line options     given below in the following order.\u00a0</p> <ul> <li><code>-Dmigrate\u00a0-DmigrateIdentityDB\u00a0-Dcomponent=identity</code></li> <li><code>-Dmigrate\u00a0-DmigrateUMDB\u00a0-Dcomponent=identity</code></li> <li><code>-Dmigrate\u00a0-DmigrateIdentityData\u00a0-Dcomponent=identity</code></li> <li><code>-Dmigrate\u00a0-DmigrateIdentityDBFinalize\u00a0-Dcomponent=identity</code></li> <li><code>-Dmigrate\u00a0-DmigrateUMData\u00a0-Dcomponent=identity</code> </li> </ul> </li> <li> <p>Upgrading to IS 5.2.0 from 5.1.0</p> <ol> <li> <p>Download 5.1.0 to 5.2.0 migration DB scripts     <code>wso2is-5.2.0-migration.zip</code>.</p> </li> <li> <p>Unzip and copy it to     the\u00a0<code>&lt;API-M_2.0.0_HOME&gt;/dbscripts/identity</code>\u00a0directory.     Copying the DB scripts are optional as it is done for reference     purposes to indicate the version to which you have upgraded your     APIM IS component.</p> </li> <li> <p>Execute the DB scripts, which corresponds to the RDBMS that you     are working with,\u00a0manually.</p> <p>Apply the respective DB script that is inside the following directories against the respective DB as follows:</p> <p> DB script directory Applicable DB Description  &lt;td <p><code>&lt;wso2is-5.2.0-migration&gt;/dbscripts/identity/migration-5.1.0_to_5.2.0 </code> <code>AM_DB</code>  &lt;td <code>&lt;wso2is-5.2.0-migration&gt;/dbscripts/migration-5.1.0_to_5.2.0 </code> <code>UM_DB</code> This script includes insert operations and some index creation scripts against the\u00a0<code>UM_CLAIM</code>\u00a0table which are required in order for you to upgrade from your previous APIM version to API-M 2.0.0. </p> <p>For example, if you are working with a MySQL DB run the\u00a0<code>mysql.sql</code> script.</p> <p>During the Identity and User Store DB migration, you may notice warning messages similar to the following:</p> <p><code>[2016-07-22 07:14:49,386] WARN - AppDeployerServiceComponent Waiting for required OSGi services: org.wso2.carbon.application.deployer.synapse.service.&gt;SynapseAppDeployerService,org.wso2.carbon.mediation.</code> <code>initializer.services.SynapseEnvironmentService, [2016-07-22 07:14:49,418] WARN - StartupFinalizerServiceComponent Waiting for required OSGi services: org.&gt;wso2.carbon.application.deployer.service.CappDeploymentService,org.wso2.carbon.server.admin.</code> <code>common.IServerAdmin,org.wso2.carbon.throttling.agent.ThrottlingAgent,</code></p> <p>Do not abort the migration process at this point as data migration is still happening in the background and aborting could result in data corruption. The time taken to finish depends on the amount of tokens in the database and could take hours depending on the amount of data.</p> <p>This concludes the upgrade process.</p> <p>Tip: </p> <p>The migration client that you use in this guide automatically migrates your tenants, workflows, external user stores etc. to the upgrade environment. There is no need to migrate them manually.</p>"},{"location":"API-M%202.0.0/upgrading-from-190-to-200/#data-migration-of-statistics-from-wso2-das-to-api-manager-analytics","title":"Data migration of statistics from WSO2 DAS to API Manager Analytics","text":"<p>From APIM 2.0.0 onwards, statistics can be configured only for RDBMS since the API Manager 1.10.0 REST based analytics configuration no longer exists. This section walks you through how to migrate statistics data from previous versions of API Manager to 2.0.0.\u00a0</p> <p>If you have configured analytics using RDBMS,</p> <ol> <li>Download and extract the <code>wso2-api-stat-migration.zip</code> file.\u00a0</li> <li>Take a backup of the API Manager statistics DB.\u00a0</li> <li>Execute the relevant script in the     <code>&lt;wso2-api-stat-migration&gt;/dbscripts</code> directory against your API     Manager statistics DB.\u00a0</li> <li>Add the API Manager statistics DB as a datasource in WSO2 API     Manager Analytics.</li> </ol> <p>If you configured analytics using the REST client in APIM 1.10.0 with DAS 3.0.x,</p> <ol> <li>Configure analytics using API Manager 1.10.0 and DAS 3.0.x with the     RDBMS client according to the instructions in Publishing API     Runtime Statistics Using     RDBMS.</li> <li>Wait for data to appear on the RDBMS and API Manager statistics     dashboard.</li> <li>Add the API Manager statistics DB as a datasource in WSO2 API     Manager Analytics.</li> </ol> <p>Finally, execute relevant db script found in the\u00a0<code>migration-scripts/110-200-migration/stat/</code> directory on the STAT_DB.</p> <p>Once done, configure analytics in API Manager 2.0.0 according to the instructions in Configuring APIM Analytics.</p>"}]}